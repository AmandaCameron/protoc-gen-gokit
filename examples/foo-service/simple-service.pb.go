// Code generated by protoc-gen-go.
// source: simple-service.proto
// DO NOT EDIT!

/*
Package foo_service is a generated protocol buffer package.

It is generated from these files:
	simple-service.proto

It has these top-level messages:
	HelloRequest
	HelloResponse
	CountToRequest
	CountToResponse
*/
package foo_service

import proto "github.com/golang/protobuf/proto"

// discarding unused import google_api1 "google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type HelloRequest struct {
	Who string `protobuf:"bytes,1,opt,name=who" json:"who,omitempty"`
}

func (m *HelloRequest) Reset()         { *m = HelloRequest{} }
func (m *HelloRequest) String() string { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()    {}

type HelloResponse struct {
	Response string `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
}

func (m *HelloResponse) Reset()         { *m = HelloResponse{} }
func (m *HelloResponse) String() string { return proto.CompactTextString(m) }
func (*HelloResponse) ProtoMessage()    {}

type CountToRequest struct {
	Target int32 `protobuf:"varint,1,opt,name=target" json:"target,omitempty"`
}

func (m *CountToRequest) Reset()         { *m = CountToRequest{} }
func (m *CountToRequest) String() string { return proto.CompactTextString(m) }
func (*CountToRequest) ProtoMessage()    {}

type CountToResponse struct {
	Response string `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
}

func (m *CountToResponse) Reset()         { *m = CountToResponse{} }
func (m *CountToResponse) String() string { return proto.CompactTextString(m) }
func (*CountToResponse) ProtoMessage()    {}

// Client API for FooService service

type FooServiceClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	CountTo(ctx context.Context, in *CountToRequest, opts ...grpc.CallOption) (*CountToResponse, error)
}

type fooServiceClient struct {
	cc *grpc.ClientConn
}

func NewFooServiceClient(cc *grpc.ClientConn) FooServiceClient {
	return &fooServiceClient{cc}
}

func (c *fooServiceClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := grpc.Invoke(ctx, "/example.foo_service.FooService/SayHello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fooServiceClient) CountTo(ctx context.Context, in *CountToRequest, opts ...grpc.CallOption) (*CountToResponse, error) {
	out := new(CountToResponse)
	err := grpc.Invoke(ctx, "/example.foo_service.FooService/CountTo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FooService service

type FooServiceServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloResponse, error)
	CountTo(context.Context, *CountToRequest) (*CountToResponse, error)
}

func RegisterFooServiceServer(s *grpc.Server, srv FooServiceServer) {
	s.RegisterService(&_FooService_serviceDesc, srv)
}

func _FooService_SayHello_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(HelloRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(FooServiceServer).SayHello(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _FooService_CountTo_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(CountToRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(FooServiceServer).CountTo(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _FooService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "example.foo_service.FooService",
	HandlerType: (*FooServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _FooService_SayHello_Handler,
		},
		{
			MethodName: "CountTo",
			Handler:    _FooService_CountTo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
