// Code generated by protoc-gen-go.
// source: simple-service.proto
// DO NOT EDIT!

/*
Package foo_service is a generated protocol buffer package.

It is generated from these files:
	simple-service.proto

It has these top-level messages:
	HelloRequest
	HelloResponse
	CountToRequest
	CountToResponse
	MessageRequest
	Message
*/
package foo_service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/AmandaCameron/protoc-gen-gokit/protobuf/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HelloRequest struct {
	Who string `protobuf:"bytes,1,opt,name=who" json:"who,omitempty"`
}

func (m *HelloRequest) Reset()                    { *m = HelloRequest{} }
func (m *HelloRequest) String() string            { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()               {}
func (*HelloRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type HelloResponse struct {
	Response string `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
}

func (m *HelloResponse) Reset()                    { *m = HelloResponse{} }
func (m *HelloResponse) String() string            { return proto.CompactTextString(m) }
func (*HelloResponse) ProtoMessage()               {}
func (*HelloResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type CountToRequest struct {
	Target int32 `protobuf:"varint,1,opt,name=target" json:"target,omitempty"`
}

func (m *CountToRequest) Reset()                    { *m = CountToRequest{} }
func (m *CountToRequest) String() string            { return proto.CompactTextString(m) }
func (*CountToRequest) ProtoMessage()               {}
func (*CountToRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type CountToResponse struct {
	Response string `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
}

func (m *CountToResponse) Reset()                    { *m = CountToResponse{} }
func (m *CountToResponse) String() string            { return proto.CompactTextString(m) }
func (*CountToResponse) ProtoMessage()               {}
func (*CountToResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type MessageRequest struct {
	MessageBody *Message `protobuf:"bytes,1,opt,name=messageBody" json:"messageBody,omitempty"`
}

func (m *MessageRequest) Reset()                    { *m = MessageRequest{} }
func (m *MessageRequest) String() string            { return proto.CompactTextString(m) }
func (*MessageRequest) ProtoMessage()               {}
func (*MessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *MessageRequest) GetMessageBody() *Message {
	if m != nil {
		return m.MessageBody
	}
	return nil
}

type Message struct {
	Hello string `protobuf:"bytes,1,opt,name=hello" json:"hello,omitempty"`
	World string `protobuf:"bytes,2,opt,name=world" json:"world,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto.RegisterType((*HelloRequest)(nil), "example.foo_service.HelloRequest")
	proto.RegisterType((*HelloResponse)(nil), "example.foo_service.HelloResponse")
	proto.RegisterType((*CountToRequest)(nil), "example.foo_service.CountToRequest")
	proto.RegisterType((*CountToResponse)(nil), "example.foo_service.CountToResponse")
	proto.RegisterType((*MessageRequest)(nil), "example.foo_service.MessageRequest")
	proto.RegisterType((*Message)(nil), "example.foo_service.Message")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for FooService service

type FooServiceClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	PostHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	PostMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*Message, error)
	CountTo(ctx context.Context, in *CountToRequest, opts ...grpc.CallOption) (*CountToResponse, error)
}

type fooServiceClient struct {
	cc *grpc.ClientConn
}

func NewFooServiceClient(cc *grpc.ClientConn) FooServiceClient {
	return &fooServiceClient{cc}
}

func (c *fooServiceClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := grpc.Invoke(ctx, "/example.foo_service.FooService/SayHello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fooServiceClient) PostHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := grpc.Invoke(ctx, "/example.foo_service.FooService/PostHello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fooServiceClient) PostMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := grpc.Invoke(ctx, "/example.foo_service.FooService/PostMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fooServiceClient) CountTo(ctx context.Context, in *CountToRequest, opts ...grpc.CallOption) (*CountToResponse, error) {
	out := new(CountToResponse)
	err := grpc.Invoke(ctx, "/example.foo_service.FooService/CountTo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FooService service

type FooServiceServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloResponse, error)
	PostHello(context.Context, *HelloRequest) (*HelloResponse, error)
	PostMessage(context.Context, *MessageRequest) (*Message, error)
	CountTo(context.Context, *CountToRequest) (*CountToResponse, error)
}

func RegisterFooServiceServer(s *grpc.Server, srv FooServiceServer) {
	s.RegisterService(&_FooService_serviceDesc, srv)
}

func _FooService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FooServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.foo_service.FooService/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FooServiceServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FooService_PostHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FooServiceServer).PostHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.foo_service.FooService/PostHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FooServiceServer).PostHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FooService_PostMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FooServiceServer).PostMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.foo_service.FooService/PostMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FooServiceServer).PostMessage(ctx, req.(*MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FooService_CountTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountToRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FooServiceServer).CountTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.foo_service.FooService/CountTo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FooServiceServer).CountTo(ctx, req.(*CountToRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FooService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "example.foo_service.FooService",
	HandlerType: (*FooServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _FooService_SayHello_Handler,
		},
		{
			MethodName: "PostHello",
			Handler:    _FooService_PostHello_Handler,
		},
		{
			MethodName: "PostMessage",
			Handler:    _FooService_PostMessage_Handler,
		},
		{
			MethodName: "CountTo",
			Handler:    _FooService_CountTo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("simple-service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 380 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x93, 0xc1, 0x4e, 0xf2, 0x40,
	0x10, 0xc7, 0x03, 0x04, 0x28, 0xd3, 0x0f, 0x3e, 0xb3, 0x10, 0x25, 0x0d, 0x26, 0x58, 0x3d, 0x90,
	0x18, 0xda, 0x04, 0xe3, 0x85, 0x83, 0x07, 0x4c, 0x8c, 0x17, 0x13, 0x02, 0x9e, 0xbc, 0x98, 0x15,
	0xd6, 0xd2, 0xa4, 0x74, 0x6a, 0x77, 0x11, 0x89, 0xf1, 0xe2, 0x2b, 0xf8, 0x38, 0x3e, 0x86, 0xaf,
	0xe0, 0x83, 0x98, 0xee, 0x2e, 0xa4, 0x26, 0xd8, 0x78, 0xf0, 0xb6, 0x33, 0xfb, 0x9f, 0xf9, 0x75,
	0xfe, 0x3b, 0x85, 0x06, 0xf7, 0xe7, 0x51, 0xc0, 0xba, 0x9c, 0xc5, 0x8f, 0xfe, 0x84, 0x39, 0x51,
	0x8c, 0x02, 0x49, 0x9d, 0x3d, 0xd1, 0x24, 0xed, 0xdc, 0x23, 0xde, 0xea, 0x2b, 0xab, 0xe5, 0x21,
	0x7a, 0x01, 0x73, 0x69, 0xe4, 0xbb, 0x34, 0x0c, 0x51, 0x50, 0xe1, 0x63, 0xc8, 0x55, 0x89, 0xdd,
	0x86, 0x7f, 0x97, 0x2c, 0x08, 0x70, 0xc4, 0x1e, 0x16, 0x8c, 0x0b, 0xb2, 0x03, 0x85, 0xe5, 0x0c,
	0x9b, 0xb9, 0x76, 0xae, 0x53, 0x19, 0x25, 0x47, 0xfb, 0x18, 0xaa, 0x5a, 0xc1, 0x23, 0x0c, 0x39,
	0x23, 0x16, 0x18, 0xb1, 0x3e, 0x6b, 0xdd, 0x26, 0xb6, 0x3b, 0x50, 0x3b, 0xc7, 0x45, 0x28, 0xae,
	0x37, 0x0d, 0x77, 0xa1, 0x24, 0x68, 0xec, 0x31, 0x21, 0xb5, 0xc5, 0x91, 0x8e, 0xec, 0x2e, 0xfc,
	0xdf, 0x28, 0x7f, 0xd1, 0x78, 0x08, 0xb5, 0x2b, 0xc6, 0x39, 0xf5, 0xd8, 0xba, 0xf1, 0x19, 0x98,
	0x73, 0x95, 0x19, 0xe0, 0x74, 0x25, 0x0b, 0xcc, 0x5e, 0xcb, 0xd9, 0x62, 0x81, 0xb3, 0xae, 0x4c,
	0x17, 0xd8, 0xa7, 0x50, 0xd6, 0x79, 0xd2, 0x80, 0xe2, 0x2c, 0x19, 0x51, 0x53, 0x55, 0x90, 0x64,
	0x97, 0x18, 0x07, 0xd3, 0x66, 0x5e, 0x65, 0x65, 0xd0, 0x7b, 0x2f, 0x00, 0x5c, 0x20, 0x8e, 0x55,
	0x6b, 0x42, 0xc1, 0x18, 0xd3, 0x95, 0x34, 0x88, 0x1c, 0x6c, 0x85, 0xa7, 0xed, 0xb5, 0xec, 0x2c,
	0x89, 0x1e, 0xb5, 0xf6, 0xfa, 0xf1, 0xf9, 0x96, 0x37, 0x48, 0xc9, 0x55, 0xdf, 0xe1, 0x41, 0x65,
	0x88, 0x5c, 0xfc, 0x29, 0xa3, 0x2e, 0x19, 0x55, 0x4b, 0x33, 0xfa, 0xc9, 0x4b, 0x13, 0x04, 0x33,
	0x01, 0xad, 0x5d, 0x39, 0xcc, 0xf4, 0x52, 0xc3, 0x32, 0x0d, 0xb7, 0xf7, 0x25, 0x66, 0xcf, 0x32,
	0x5c, 0xed, 0x7c, 0x3f, 0xfd, 0x04, 0x24, 0x82, 0xb2, 0xde, 0x81, 0x1f, 0x60, 0xdf, 0x77, 0xc9,
	0x3a, 0xca, 0x16, 0xe9, 0xd9, 0x2c, 0x09, 0x6d, 0x10, 0xe2, 0x4e, 0x92, 0x1b, 0x57, 0xa0, 0xfb,
	0xac, 0x96, 0xee, 0x65, 0x50, 0xbd, 0x31, 0x53, 0xa5, 0x77, 0x25, 0xf9, 0x13, 0x9c, 0x7c, 0x05,
	0x00, 0x00, 0xff, 0xff, 0xf9, 0x28, 0xc3, 0x29, 0x4f, 0x03, 0x00, 0x00,
}
